/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/ozLvARXOQ07
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import React from "react" // Add this import statement
import { useState, useMemo } from "react"
import { Input } from "./ui/input"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "./ui/table"
import { Avatar, AvatarImage, AvatarFallback } from "./ui/avatar"
import Link from "next/link"

export function Component({ contributors }: { contributors: any[] }) {

  // console.log("contributors:", contributors)

  const [search, setSearch] = useState<string>("")
  const [sort, setSort] = useState<{ key: string; order: string }>({ key: "totalPRs", order: "desc" })
  const sortedContributors = useMemo(() => {
    if(contributors.length === 0) return [];
    return [...contributors].sort((a, b) => {
      const aValue = a[sort.key];
      const bValue = b[sort.key];
      if (typeof aValue === "string") {
        return sort.order === "asc" ? aValue.toLocaleLowerCase().localeCompare(bValue) : bValue.toLocaleLowerCase().localeCompare(aValue);
      }
      return sort.order === "asc" ? aValue - bValue : bValue - aValue;
    });
  }, [contributors, sort]);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => setSearch(e.target.value)
  const handleSort = (key: string) => {
    if (sort.key === key) {
      setSort({ key, order: sort.order === "asc" ? "desc" : "asc" })
    } else {
      setSort({ key, order: "desc" })
    }
  }
  const filteredContributors = useMemo(() => {
    if(contributors.length === 0) return [];
    return sortedContributors.filter(contributor =>
      contributor.username.toLowerCase().includes(search.toLowerCase())
    );
  }, [sortedContributors, search]);

  return (
    <div className="mx-auto max-w-4xl px-4 md:px-6 py-8">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">Top Contributors</h1>
        <div className="flex items-center gap-4">
          <Input
            placeholder="Search contributors..."
            className="bg-background"
            value={search}
            onChange={handleSearch}
          />
        </div>
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]">Avatar</TableHead>
            <TableHead className="cursor-pointer" onClick={() => handleSort("username")}>
              Username
              {sort.key === "username" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="text-right cursor-pointer" onClick={() => handleSort("totalPRs")}>
              Total PRs
              {sort.key === "totalPRs" && (
                <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
              )}
            </TableHead>
            <TableHead className="text-right cursor-pointer" onClick={() => handleSort("openPRs")}>
              Open PRs
              {sort.key === "openPRs" && (
                <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
              )}
            </TableHead>
            <TableHead className="text-right cursor-pointer" onClick={() => handleSort("mergedPRs")}>
              Merged PRs
              {sort.key === "mergedPRs" && (
                <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
              )}
            </TableHead>
            <TableHead className="text-right cursor-pointer" onClick={() => handleSort("issues")}>
              Issues
              {sort.key === "issues" && (
                <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
              )}
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredContributors.map((contributor) => (
            <TableRow key={contributor.username}>
              <TableCell>
                <Avatar className="w-8 h-8 border">
                  <AvatarImage src={contributor.avatar} alt={contributor.username} />
                  <AvatarFallback>{contributor.username.slice(0, 2).toUpperCase()}</AvatarFallback>
                </Avatar>
              </TableCell>
              <TableCell className="font-medium">
                <Link href={`https://github.com/${contributor.username}`} prefetch={false}>
                  {contributor.username}
                </Link>
              </TableCell>
              <TableCell className="text-right">{contributor.totalPRs.toLocaleString()}</TableCell>
              <TableCell className="text-right">{contributor.openPRs.toLocaleString()}</TableCell>
              <TableCell className="text-right">{contributor.mergedPRs.toLocaleString()}</TableCell>
              <TableCell className="text-right">{contributor.issues.toLocaleString()}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}